{"ast":null,"code":"import axios from 'axios';\nconst baseApi = 'http://localhost:801';\nconst baseApiCore = 'http://localhost:8003/api/Redo_Summary_View';\nconst isCore = true;\nexport const YKDRequest = async (_url, _data, _method = 'post') => {\n  var mainUrl = isCore ? baseApiCore : baseApi;\n  var msg = axios({\n    method: _method,\n    //withCredentials:true,\n    url: mainUrl + _url,\n    responseType: 'json',\n    data: _data\n  }).then(res => {\n    if (res.status === 200) {\n      if (isCore) {\n        return res.data.data;\n      } else {\n        return res.data;\n      }\n    }\n  });\n  return msg;\n}; // export const DoLogin=async(postData:any):Promise<any>=>{\n//   var msg=await YKDRequest('/api/Login/Login',postData)\n//   return msg;\n// }\n// export const GetColorInfo=async(postData:any):Promise<any>=>{\n//   var msg=await YKDRequest('/api/ColorInfo/GetColorInfo',null,'get')\n//   return msg;\n// }\n\n_c = YKDRequest;\nexport const GetForStaffWork = async () => {\n  var msg = await YKDRequest('/GetQuantityPerEmployee', null, 'get');\n  return msg;\n};\n_c2 = GetForStaffWork;\nexport const GetDayTarget = async () => {\n  var msg = await YKDRequest('/GetCurrentDayQuantity', null, 'get');\n  return msg;\n};\n_c3 = GetDayTarget;\nexport const GetProcessWork = async () => {\n  var msg = await YKDRequest('/GetProcessRedoState', null, 'get');\n  return msg;\n};\n_c4 = GetProcessWork;\nexport const GetReworkTarget = async () => {\n  var msg = await YKDRequest('/GetCurrentRedoQuantity', null, 'get');\n  return msg;\n};\n_c5 = GetReworkTarget;\nexport const GetBalanceSheet = async () => {\n  var msg = await YKDRequest('/GetProcessQCState', null, 'get');\n  return msg;\n};\n_c6 = GetBalanceSheet;\nexport const GetDayProduction = async () => {\n  var msg = await YKDRequest('/GetCurrentStyle', null, 'get');\n  return msg;\n};\n_c7 = GetDayProduction;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"YKDRequest\");\n$RefreshReg$(_c2, \"GetForStaffWork\");\n$RefreshReg$(_c3, \"GetDayTarget\");\n$RefreshReg$(_c4, \"GetProcessWork\");\n$RefreshReg$(_c5, \"GetReworkTarget\");\n$RefreshReg$(_c6, \"GetBalanceSheet\");\n$RefreshReg$(_c7, \"GetDayProduction\");","map":{"version":3,"sources":["/Users/kscissorfootdoctor/Desktop/ykd.tv/src/utils/RequestService.tsx"],"names":["axios","baseApi","baseApiCore","isCore","YKDRequest","_url","_data","_method","mainUrl","msg","method","url","responseType","data","then","res","status","GetForStaffWork","GetDayTarget","GetProcessWork","GetReworkTarget","GetBalanceSheet","GetDayProduction"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAc,GAAC,sBAArB;AACA,MAAMC,WAAkB,GAAC,6CAAzB;AACA,MAAMC,MAAc,GAAC,IAArB;AAIA,OAAO,MAAMC,UAAU,GAAC,OAAMC,IAAN,EAAkBC,KAAlB,EAA6BC,OAAW,GAAC,MAAzC,KAA+D;AAErF,MAAIC,OAAO,GAACL,MAAM,GAACD,WAAD,GAAaD,OAA/B;AACC,MAAIQ,GAAG,GAAET,KAAK,CAAC;AACVU,IAAAA,MAAM,EAACH,OADG;AAEV;AACAI,IAAAA,GAAG,EAACH,OAAO,GAACH,IAHF;AAIVO,IAAAA,YAAY,EAAC,MAJH;AAKVC,IAAAA,IAAI,EAACP;AALK,GAAD,CAAL,CAMLQ,IANK,CAMCC,GAAD,IAAW;AACjB,QAAGA,GAAG,CAACC,MAAJ,KAAa,GAAhB,EACA;AACE,UAAGb,MAAH,EACA;AACE,eAAOY,GAAG,CAACF,IAAJ,CAASA,IAAhB;AACD,OAHD,MAKA;AACE,eAAOE,GAAG,CAACF,IAAX;AACD;AACF;AACF,GAlBO,CAAT;AAmBA,SAAOJ,GAAP;AACF,CAvBM,C,CAyBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;KAjCaL,U;AAsCb,OAAO,MAAMa,eAAe,GAAC,YAAsB;AACjD,MAAIR,GAAG,GAAC,MAAML,UAAU,CAAC,yBAAD,EAA2B,IAA3B,EAAgC,KAAhC,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMQ,e;AAKb,OAAO,MAAMC,YAAY,GAAC,YAAsB;AAC9C,MAAIT,GAAG,GAAC,MAAML,UAAU,CAAC,wBAAD,EAA0B,IAA1B,EAA+B,KAA/B,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMS,Y;AAKb,OAAO,MAAMC,cAAc,GAAC,YAAsB;AAChD,MAAIV,GAAG,GAAC,MAAML,UAAU,CAAC,sBAAD,EAAwB,IAAxB,EAA6B,KAA7B,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMU,c;AAKb,OAAO,MAAMC,eAAe,GAAC,YAAsB;AACjD,MAAIX,GAAG,GAAC,MAAML,UAAU,CAAC,yBAAD,EAA2B,IAA3B,EAAgC,KAAhC,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMW,e;AAKb,OAAO,MAAMC,eAAe,GAAC,YAAsB;AACjD,MAAIZ,GAAG,GAAC,MAAML,UAAU,CAAC,oBAAD,EAAsB,IAAtB,EAA2B,KAA3B,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMY,e;AAKb,OAAO,MAAMC,gBAAgB,GAAC,YAAsB;AAClD,MAAIb,GAAG,GAAC,MAAML,UAAU,CAAC,kBAAD,EAAoB,IAApB,EAAyB,KAAzB,CAAxB;AACA,SAAOK,GAAP;AACD,CAHM;MAAMa,gB","sourcesContent":["import axios from 'axios';\r\nconst baseApi:string='http://localhost:801'\r\nconst baseApiCore:string='http://localhost:8003/api/Redo_Summary_View'\r\nconst isCore:boolean=true;\r\n\r\n\r\n\r\nexport const YKDRequest=async(_url:string,_data?:any,_method:any='post'):Promise<any>=>{\r\n\r\n  var mainUrl=isCore?baseApiCore:baseApi;\r\n   var msg= axios({\r\n        method:_method,\r\n        //withCredentials:true,\r\n        url:mainUrl+_url,\r\n        responseType:'json',\r\n        data:_data\r\n    }).then((res:any)=>{\r\n      if(res.status===200)\r\n      {\r\n        if(isCore)\r\n        {\r\n          return res.data.data;\r\n        }\r\n        else\r\n        {\r\n          return res.data;\r\n        }\r\n      }\r\n    })\r\n   return msg;\r\n}\r\n\r\n// export const DoLogin=async(postData:any):Promise<any>=>{\r\n//   var msg=await YKDRequest('/api/Login/Login',postData)\r\n//   return msg;\r\n// }\r\n\r\n// export const GetColorInfo=async(postData:any):Promise<any>=>{\r\n//   var msg=await YKDRequest('/api/ColorInfo/GetColorInfo',null,'get')\r\n//   return msg;\r\n// }\r\n\r\n\r\n\r\n\r\nexport const GetForStaffWork=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetQuantityPerEmployee',null,'get')\r\n  return msg;\r\n}\r\n\r\nexport const GetDayTarget=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetCurrentDayQuantity',null,'get')\r\n  return msg;\r\n}\r\n\r\nexport const GetProcessWork=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetProcessRedoState',null,'get')\r\n  return msg;\r\n}\r\n\r\nexport const GetReworkTarget=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetCurrentRedoQuantity',null,'get')\r\n  return msg;\r\n}\r\n\r\nexport const GetBalanceSheet=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetProcessQCState',null,'get')\r\n  return msg;\r\n}\r\n\r\nexport const GetDayProduction=async():Promise<any>=>{\r\n  var msg=await YKDRequest('/GetCurrentStyle',null,'get')\r\n  return msg;\r\n}"]},"metadata":{},"sourceType":"module"}