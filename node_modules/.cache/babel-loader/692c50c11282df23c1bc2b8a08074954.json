{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kscissorfootdoctor/Desktop/ykd.tv/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport React, { forwardRef, useState, useRef, useEffect, useMemo } from 'react';\nimport { s as styleInject, P as PropTypes } from '../style-inject.es-3bd340c8.js';\nimport { c as co } from '../index-65ee9985.js';\nimport { s as slicedToArray, _ as _extends, t as toConsumableArray } from '../_babelHelpers-a63acad8.js';\nimport { u as useAutoResize } from '../autoResize-73247714.js';\nimport { c as classnames } from '../index-bddb7af5.js';\nimport { u as util_2, a as util_1 } from '../index-989b4d2a.js';\nvar css = \".dv-scroll-board {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  color: #fff;\\n}\\n.dv-scroll-board .text {\\n  padding: 0 10px;\\n  box-sizing: border-box;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.dv-scroll-board .header {\\n  display: flex;\\n  flex-direction: row;\\n  font-size: 15px;\\n}\\n.dv-scroll-board .header .header-item {\\n  padding: 0 10px;\\n  box-sizing: border-box;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  transition: all 0.3s;\\n}\\n.dv-scroll-board .rows {\\n  overflow: hidden;\\n}\\n.dv-scroll-board .rows .row-item {\\n  display: flex;\\n  font-size: 14px;\\n  transition: all 0.3s;\\n}\\n.dv-scroll-board .rows .ceil {\\n  padding: 0 10px;\\n  box-sizing: border-box;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n.dv-scroll-board .rows .index {\\n  border-radius: 3px;\\n  padding: 0px 3px;\\n}\\n\";\nstyleInject(css);\nvar defaultConfig = {\n  /**\n   * @description Board header\n   * @type {Array<String>}\n   * @default header = []\n   * @example header = ['column1', 'column2', 'column3']\n   */\n  header: [],\n\n  /**\n   * @description Board data\n   * @type {Array<Array>}\n   * @default data = []\n   */\n  data: [],\n\n  /**\n   * @description Row num\n   * @type {Number}\n   * @default rowNum = 5\n   */\n  rowNum: 5,\n\n  /**\n   * @description Header background color\n   * @type {String}\n   * @default headerBGC = '#00BAFF'\n   */\n  headerBGC: '#00BAFF',\n\n  /**\n   * @description Odd row background color\n   * @type {String}\n   * @default oddRowBGC = '#003B51'\n   */\n  oddRowBGC: '#003B51',\n\n  /**\n   * @description Even row background color\n   * @type {String}\n   * @default evenRowBGC = '#003B51'\n   */\n  evenRowBGC: '#0A2732',\n\n  /**\n   * @description Scroll wait time\n   * @type {Number}\n   * @default waitTime = 2000\n   */\n  waitTime: 2000,\n\n  /**\n   * @description Header height\n   * @type {Number}\n   * @default headerHeight = 35\n   */\n  headerHeight: 35,\n\n  /**\n   * @description Column width\n   * @type {Array<Number>}\n   * @default columnWidth = []\n   */\n  columnWidth: [],\n\n  /**\n   * @description Column align\n   * @type {Array<String>}\n   * @default align = []\n   * @example align = ['left', 'center', 'right']\n   */\n  align: [],\n\n  /**\n   * @description Show index\n   * @type {Boolean}\n   * @default index = false\n   */\n  index: false,\n\n  /**\n   * @description index Header\n   * @type {String}\n   * @default indexHeader = '#'\n   */\n  indexHeader: '#',\n\n  /**\n   * @description Carousel type\n   * @type {String}\n   * @default carousel = 'single'\n   * @example carousel = 'single' | 'page'\n   */\n  carousel: 'single',\n\n  /**\n   * @description Pause scroll when mouse hovered\n   * @type {Boolean}\n   * @default hoverPause = true\n   * @example hoverPause = true | false\n   */\n  hoverPause: true\n};\n\nfunction calcHeaderData(_ref) {\n  var header = _ref.header,\n      index = _ref.index,\n      indexHeader = _ref.indexHeader;\n\n  if (!header.length) {\n    return [];\n  }\n\n  header = [].concat(toConsumableArray(header));\n  if (index) header.unshift(indexHeader);\n  return header;\n}\n\nfunction calcRows(_ref2) {\n  var data = _ref2.data,\n      index = _ref2.index,\n      headerBGC = _ref2.headerBGC,\n      rowNum = _ref2.rowNum;\n\n  if (index) {\n    data = data.map(function (row, i) {\n      row = [].concat(toConsumableArray(row));\n      var indexTag = '<span class=\"index\" style=\"background-color: ' + headerBGC + ';\">' + (i + 1) + '</span>';\n      row.unshift(indexTag);\n      return row;\n    });\n  }\n\n  data = data.map(function (ceils, i) {\n    return {\n      ceils: ceils,\n      rowIndex: i\n    };\n  });\n  var rowLength = data.length;\n\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\n    data = [].concat(toConsumableArray(data), toConsumableArray(data));\n  }\n\n  return data.map(function (d, i) {\n    return _extends({}, d, {\n      scroll: i\n    });\n  });\n}\n\nfunction calcAligns(mergedConfig, header) {\n  var columnNum = header.length;\n  var aligns = new Array(columnNum).fill('left');\n  var align = mergedConfig.align;\n  return util_2(aligns, align);\n}\n\nvar ScrollBoard = forwardRef(function (_ref3, ref) {\n  var _onClick = _ref3.onClick,\n      _ref3$config = _ref3.config,\n      config = _ref3$config === undefined ? {} : _ref3$config,\n      className = _ref3.className,\n      style = _ref3.style,\n      onMouseOver = _ref3.onMouseOver;\n\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(animation);\n\n  var _useAutoResize = useAutoResize(ref),\n      width = _useAutoResize.width,\n      height = _useAutoResize.height,\n      domRef = _useAutoResize.domRef;\n\n  var _useState = useState({\n    mergedConfig: null,\n    header: [],\n    rows: [],\n    widths: [],\n    heights: [],\n    aligns: []\n  }),\n      _useState2 = slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var mergedConfig = state.mergedConfig,\n      header = state.header,\n      rows = state.rows,\n      widths = state.widths,\n      heights = state.heights,\n      aligns = state.aligns;\n  var stateRef = useRef(_extends({}, state, {\n    rowsData: [],\n    avgHeight: 0,\n    animationIndex: 0\n  }));\n  Object.assign(stateRef.current, state);\n\n  function onResize() {\n    if (!mergedConfig) return;\n    var widths = calcWidths(mergedConfig, stateRef.current.rowsData);\n    var heights = calcHeights(mergedConfig, header);\n    var data = {\n      widths: widths,\n      heights: heights\n    };\n    Object.assign(stateRef.current, data);\n    setState(function (state) {\n      return _extends({}, state, data);\n    });\n  }\n\n  function calcData() {\n    var mergedConfig = util_2(util_1(defaultConfig, true), config || {});\n    var header = calcHeaderData(mergedConfig);\n    var rows = calcRows(mergedConfig);\n    var widths = calcWidths(mergedConfig, stateRef.current.rowsData);\n    var heights = calcHeights(mergedConfig, header);\n    var aligns = calcAligns(mergedConfig, header);\n    var data = {\n      mergedConfig: mergedConfig,\n      header: header,\n      rows: rows,\n      widths: widths,\n      aligns: aligns,\n      heights: heights\n    };\n    Object.assign(stateRef.current, data, {\n      rowsData: rows,\n      animationIndex: 0\n    });\n    setState(function (state) {\n      return _extends({}, state, data);\n    });\n  }\n\n  function calcWidths(_ref4, rowsData) {\n    var columnWidth = _ref4.columnWidth,\n        header = _ref4.header;\n    var usedWidth = columnWidth.reduce(function (all, w) {\n      return all + w;\n    }, 0);\n    var columnNum = 0;\n\n    if (rowsData[0]) {\n      columnNum = rowsData[0].ceils.length;\n    } else if (header.length) {\n      columnNum = header.length;\n    }\n\n    var avgWidth = (width - usedWidth) / (columnNum - columnWidth.length);\n    var widths = new Array(columnNum).fill(avgWidth);\n    return util_2(widths, columnWidth);\n  }\n\n  function calcHeights(_ref5, header) {\n    var headerHeight = _ref5.headerHeight,\n        rowNum = _ref5.rowNum,\n        data = _ref5.data;\n    var allHeight = height;\n    if (header.length) allHeight -= headerHeight;\n    var avgHeight = allHeight / rowNum;\n    Object.assign(stateRef.current, {\n      avgHeight: avgHeight\n    });\n    return new Array(data.length).fill(avgHeight);\n  }\n\n  function animation() {\n    var _rows;\n\n    var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _stateRef$current, avgHeight, animationIndex, _stateRef$current$mer, waitTime, carousel, rowNum, rowsData, rowLength, animationNum, rows, heights, back, newHeights;\n\n    return _regeneratorRuntime.wrap(function animation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _stateRef$current = stateRef.current, avgHeight = _stateRef$current.avgHeight, animationIndex = _stateRef$current.animationIndex, _stateRef$current$mer = _stateRef$current.mergedConfig, waitTime = _stateRef$current$mer.waitTime, carousel = _stateRef$current$mer.carousel, rowNum = _stateRef$current$mer.rowNum, rowsData = _stateRef$current.rowsData;\n            rowLength = rowsData.length;\n\n            if (!start) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, waitTime);\n            });\n\n          case 5:\n            animationNum = carousel === 'single' ? 1 : rowNum;\n            rows = rowsData.slice(animationIndex);\n\n            (_rows = rows).push.apply(_rows, toConsumableArray(rowsData.slice(0, animationIndex)));\n\n            rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1);\n            heights = new Array(rowLength).fill(avgHeight);\n            setState(function (state) {\n              return _extends({}, state, {\n                rows: rows,\n                heights: heights\n              });\n            });\n            _context.next = 13;\n            return new Promise(function (resolve) {\n              return setTimeout(resolve, 300);\n            });\n\n          case 13:\n            animationIndex += animationNum;\n            back = animationIndex - rowLength;\n            if (back >= 0) animationIndex = back;\n            newHeights = [].concat(toConsumableArray(heights));\n            newHeights.splice.apply(newHeights, [0, animationNum].concat(toConsumableArray(new Array(animationNum).fill(0))));\n            Object.assign(stateRef.current, {\n              animationIndex: animationIndex\n            });\n            setState(function (state) {\n              return _extends({}, state, {\n                heights: newHeights\n              });\n            });\n\n          case 20:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _marked, this);\n  }\n\n  function emitEvent(handle, ri, ci, row, ceil) {\n    var ceils = row.ceils,\n        rowIndex = row.rowIndex;\n    handle && handle({\n      row: ceils,\n      ceil: ceil,\n      rowIndex: rowIndex,\n      columnIndex: ci\n    });\n  }\n\n  function handleHover(enter, ri, ci, row, ceil) {\n    if (enter) emitEvent(onMouseOver, ri, ci, row, ceil);\n    if (!mergedConfig.hoverPause) return;\n    var _task$current = task.current,\n        pause = _task$current.pause,\n        resume = _task$current.resume;\n    enter && pause && resume ? pause() : resume();\n  }\n\n  var getBackgroundColor = function getBackgroundColor(rowIndex) {\n    return mergedConfig[rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC'];\n  };\n\n  var task = useRef({});\n  useEffect(function () {\n    var _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loop);\n\n    calcData();\n    var start = true;\n\n    function loop() {\n      var _this = this;\n\n      var _loop;\n\n      return _regeneratorRuntime.wrap(function loop$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var waitTime;\n                return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        return _context2.delegateYield(animation(start), 't0', 1);\n\n                      case 1:\n                        start = false;\n                        waitTime = stateRef.current.mergedConfig.waitTime;\n                        _context2.next = 5;\n                        return new Promise(function (resolve) {\n                          return setTimeout(resolve, waitTime - 300);\n                        });\n\n                      case 5:\n                      case 'end':\n                        return _context2.stop();\n                    }\n                  }\n                }, _loop, _this);\n              });\n\n            case 1:\n              return _context3.delegateYield(_loop(), 't0', 3);\n\n            case 3:\n              _context3.next = 1;\n              break;\n\n            case 5:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _marked2, this);\n    }\n\n    var _stateRef$current2 = stateRef.current,\n        rowNum = _stateRef$current2.mergedConfig.rowNum,\n        rowsData = _stateRef$current2.rows;\n    var rowLength = rowsData.length;\n    if (rowNum >= rowLength) return;\n    task.current = co(loop);\n    return task.current.end;\n  }, [config, domRef.current]);\n  useEffect(onResize, [width, height, domRef.current]);\n  var classNames = useMemo(function () {\n    return classnames('dv-scroll-board', className);\n  }, [className]);\n  return React.createElement('div', {\n    className: classNames,\n    style: style,\n    ref: domRef\n  }, !!header.length && !!mergedConfig && React.createElement('div', {\n    className: 'header',\n    style: {\n      backgroundColor: '' + mergedConfig.headerBGC\n    }\n  }, header.map(function (headerItem, i) {\n    return React.createElement('div', {\n      className: 'header-item',\n      key: headerItem + '-' + i,\n      style: {\n        height: mergedConfig.headerHeight + 'px',\n        lineHeight: mergedConfig.headerHeight + 'px',\n        width: widths[i] + 'px'\n      },\n      align: aligns[i],\n      dangerouslySetInnerHTML: {\n        __html: headerItem\n      }\n    });\n  })), !!mergedConfig && React.createElement('div', {\n    className: 'rows',\n    style: {\n      height: height - (header.length ? mergedConfig.headerHeight : 0) + 'px'\n    }\n  }, rows.map(function (row, ri) {\n    return React.createElement('div', {\n      className: 'row-item',\n      key: row.toString() + '-' + row.scroll,\n      style: {\n        height: heights[ri] + 'px',\n        lineHeight: heights[ri] + 'px',\n        backgroundColor: '' + getBackgroundColor(row.rowIndex)\n      }\n    }, row.ceils.map(function (ceil, ci) {\n      return React.createElement('div', {\n        className: 'ceil',\n        key: ceil + '-' + ri + '-' + ci,\n        style: {\n          width: widths[ci] + 'px'\n        },\n        align: aligns[ci],\n        dangerouslySetInnerHTML: {\n          __html: ceil\n        },\n        onClick: function onClick() {\n          return emitEvent(_onClick, ri, ci, row, ceil);\n        },\n        onMouseEnter: function onMouseEnter() {\n          return handleHover(true, ri, ci, row, ceil);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return handleHover(false);\n        }\n      });\n    }));\n  })));\n});\nScrollBoard.propTypes = {\n  config: PropTypes.object,\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  className: PropTypes.string,\n  style: PropTypes.object\n};\nexport default ScrollBoard;","map":{"version":3,"sources":["../../src/components/scrollBoard/index.js"],"names":["defaultConfig","header","data","rowNum","headerBGC","oddRowBGC","evenRowBGC","waitTime","headerHeight","columnWidth","align","index","indexHeader","carousel","hoverPause","row","indexTag","i","ceils","rowIndex","rowLength","scroll","columnNum","aligns","mergedConfig","deepMerge","ScrollBoard","onClick","config","className","style","onMouseOver","width","height","domRef","useAutoResize","state","setState","rows","widths","heights","stateRef","rowsData","avgHeight","animationIndex","Object","calcWidths","calcHeights","deepClone","calcHeaderData","calcRows","calcAligns","usedWidth","all","avgWidth","allHeight","start","setTimeout","animationNum","back","newHeights","handle","ceil","columnIndex","emitEvent","pause","resume","task","enter","getBackgroundColor","useRef","useEffect","calcData","animation","co","classNames","classnames","backgroundColor","headerItem","lineHeight","__html","handleHover","PropTypes","object"],"mappings":";;;;;;;;;;AAeA,IAAMA,aAAAA,GAAgB;AACpB;;;;;;AAMAC,EAAAA,MAAAA,EAPoB,EAAA;;AAQpB;;;;;AAKAC,EAAAA,IAAAA,EAboB,EAAA;;AAcpB;;;;;AAKAC,EAAAA,MAAAA,EAnBoB,CAAA;;AAoBpB;;;;;AAKAC,EAAAA,SAAAA,EAzBoB,SAAA;;AA0BpB;;;;;AAKAC,EAAAA,SAAAA,EA/BoB,SAAA;;AAgCpB;;;;;AAKAC,EAAAA,UAAAA,EArCoB,SAAA;;AAsCpB;;;;;AAKAC,EAAAA,QAAAA,EA3CoB,IAAA;;AA4CpB;;;;;AAKAC,EAAAA,YAAAA,EAjDoB,EAAA;;AAkDpB;;;;;AAKAC,EAAAA,WAAAA,EAvDoB,EAAA;;AAwDpB;;;;;;AAMAC,EAAAA,KAAAA,EA9DoB,EAAA;;AA+DpB;;;;;AAKAC,EAAAA,KAAAA,EApEoB,KAAA;;AAqEpB;;;;;AAKAC,EAAAA,WAAAA,EA1EoB,GAAA;;AA2EpB;;;;;;AAMAC,EAAAA,QAAAA,EAjFoB,QAAA;;AAkFpB;;;;;;AAMAC,EAAAA,UAAAA,EAAY;AAxFQ,CAAtB;;AA2FA,SAAA,cAAA,CAAA,IAAA,EAAwD;AAAA,MAA9Bb,MAA8B,GAAA,IAAA,CAA9BA,MAA8B;AAAA,MAAtBU,KAAsB,GAAA,IAAA,CAAtBA,KAAsB;AAAA,MAAfC,WAAe,GAAA,IAAA,CAAfA,WAAe;;AACtD,MAAI,CAACX,MAAAA,CAAL,MAAA,EAAoB;AAClB,WAAA,EAAA;AACD;;AAEDA,EAAAA,MAAAA,GAAAA,GAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,MAAAA,CAAAA,CAAAA;AAEA,MAAA,KAAA,EAAWA,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA;AAEX,SAAA,MAAA;AACD;;AAED,SAAA,QAAA,CAAA,KAAA,EAAsD;AAAA,MAAlCC,IAAkC,GAAA,KAAA,CAAlCA,IAAkC;AAAA,MAA5BS,KAA4B,GAAA,KAAA,CAA5BA,KAA4B;AAAA,MAArBP,SAAqB,GAAA,KAAA,CAArBA,SAAqB;AAAA,MAAVD,MAAU,GAAA,KAAA,CAAVA,MAAU;;AACpD,MAAA,KAAA,EAAW;AACTD,IAAAA,IAAAA,GAAO,IAAA,CAAA,GAAA,CAAS,UAAA,GAAA,EAAA,CAAA,EAAY;AAC1Ba,MAAAA,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AAEA,UAAMC,QAAAA,GAAAA,kDAAAA,SAAAA,GAAAA,KAAAA,IAA0EC,CAAAA,GAA1ED,CAAAA,IAAN,SAAA;AAGAD,MAAAA,GAAAA,CAAAA,OAAAA,CAAAA,QAAAA;AAEA,aAAA,GAAA;AARFb,KAAO,CAAPA;AAUD;;AAEDA,EAAAA,IAAAA,GAAO,IAAA,CAAA,GAAA,CAAS,UAAA,KAAA,EAAA,CAAA,EAAA;AAAA,WAAe;AAAEgB,MAAAA,KAAAA,EAAF,KAAA;AAASC,MAAAA,QAAAA,EAAxB;AAAe,KAAf;AAAhBjB,GAAO,CAAPA;AAEA,MAAMkB,SAAAA,GAAYlB,IAAAA,CAAlB,MAAA;;AAEA,MAAIkB,SAAAA,GAAAA,MAAAA,IAAsBA,SAAAA,GAAY,IAAtC,MAAA,EAAkD;AAChDlB,IAAAA,IAAAA,GAAAA,GAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,EAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,CAAAA;AACD;;AAED,SAAO,IAAA,CAAA,GAAA,CAAS,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAA,QAAA,CAAA,EAAA,EAAA,CAAA,EAAA;AAAmBmB,MAAAA,MAAAA,EAAnB;AAAA,KAAA,CAAA;AAAhB,GAAO,CAAP;AACD;;AAED,SAAA,UAAA,CAAA,YAAA,EAAA,MAAA,EAA0C;AACxC,MAAMC,SAAAA,GAAYrB,MAAAA,CAAlB,MAAA;AAEA,MAAIsB,MAAAA,GAAS,IAAA,KAAA,CAAA,SAAA,EAAA,IAAA,CAAb,MAAa,CAAb;AAHwC,MAKhCb,KALgC,GAKtBc,YALsB,CAAA,KAAA;AAOxC,SAAOC,MAAAA,CAAAA,MAAAA,EAAP,KAAOA,CAAP;AACD;;AAED,IAAMC,WAAAA,GAAc,UAAA,CAAW,UAAA,KAAA,EAAA,GAAA,EAAkE;AAAA,MAA/DC,QAA+D,GAAA,KAAA,CAA/DA,OAA+D;AAAA,MAAA,YAAA,GAAA,KAAA,CAAtDC,MAAsD;AAAA,MAAtDA,MAAsD,GAAA,YAAA,KAAA,SAAA,GAA7C,EAA6C,GAAA,YAAA;AAAA,MAAzCC,SAAyC,GAAA,KAAA,CAAzCA,SAAyC;AAAA,MAA9BC,KAA8B,GAAA,KAAA,CAA9BA,KAA8B;AAAA,MAAvBC,WAAuB,GAAA,KAAA,CAAvBA,WAAuB;;AAAA,MAAA,OAAA,GAAA,aAAA,oBAAA,IAAA,CAAA,SAAA,CAAA;;AAAA,MAAA,cAAA,GAC7DI,aAAAA,CAD6D,GAC7DA,CAD6D;AAAA,MACvFH,KADuF,GAAA,cAAA,CAAA,KAAA;AAAA,MAChFC,MADgF,GAAA,cAAA,CAAA,MAAA;AAAA,MACxEC,MADwE,GAAA,cAAA,CAAA,MAAA;;AAAA,MAAA,SAAA,GAGrE,QAAA,CAAS;AACjCV,IAAAA,YAAAA,EADiC,IAAA;AAGjCvB,IAAAA,MAAAA,EAHiC,EAAA;AAKjCqC,IAAAA,IAAAA,EALiC,EAAA;AAOjCC,IAAAA,MAAAA,EAPiC,EAAA;AASjCC,IAAAA,OAAAA,EATiC,EAAA;AAWjCjB,IAAAA,MAAAA,EAAQ;AAXyB,GAAT,CAHqE;AAAA,MAAA,UAAA,GAAA,aAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAGxFa,KAHwF,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGjFC,QAHiF,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAiBvFb,YAjBuF,GAiB/BY,KAjB+B,CAAA,YAAA;AAAA,MAiBzEnC,MAjByE,GAiB/BmC,KAjB+B,CAAA,MAAA;AAAA,MAiBjEE,IAjBiE,GAiB/BF,KAjB+B,CAAA,IAAA;AAAA,MAiB3DG,MAjB2D,GAiB/BH,KAjB+B,CAAA,MAAA;AAAA,MAiBnDI,OAjBmD,GAiB/BJ,KAjB+B,CAAA,OAAA;AAAA,MAiB1Cb,MAjB0C,GAiB/Ba,KAjB+B,CAAA,MAAA;AAmB/F,MAAMK,QAAAA,GAAW,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEfC,IAAAA,QAAAA,EAFe,EAAA;AAGfC,IAAAA,SAAAA,EAHe,CAAA;AAIfC,IAAAA,cAAAA,EAAgB;AAJD,GAAA,CAAA,CAAjB;AAOAC,EAAAA,MAAAA,CAAAA,MAAAA,CAAcJ,QAAAA,CAAdI,OAAAA,EAAAA,KAAAA;;AAEA,WAAA,QAAA,GAAoB;AAClB,QAAI,CAAJ,YAAA,EAAmB;AAEnB,QAAMN,MAAAA,GAASO,UAAAA,CAAAA,YAAAA,EAAyBL,QAAAA,CAAAA,OAAAA,CAAxC,QAAeK,CAAf;AAEA,QAAMN,OAAAA,GAAUO,WAAAA,CAAAA,YAAAA,EAAhB,MAAgBA,CAAhB;AAEA,QAAM7C,IAAAA,GAAO;AAAEqC,MAAAA,MAAAA,EAAF,MAAA;AAAUC,MAAAA,OAAAA,EAAvB;AAAa,KAAb;AAEAK,IAAAA,MAAAA,CAAAA,MAAAA,CAAcJ,QAAAA,CAAdI,OAAAA,EAAAA,IAAAA;AACAR,IAAAA,QAAAA,CAAS,UAAA,KAAA,EAAA;AAAA,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AAATA,KAAAA,CAAAA;AACD;;AAED,WAAA,QAAA,GAAoB;AAClB,QAAMb,YAAAA,GAAeC,MAAAA,CACnBuB,MAAAA,CAAAA,aAAAA,EADmBvB,IACnBuB,CADmBvB,EAEnBG,MAAAA,IAFF,EAAqBH,CAArB;AAKA,QAAMxB,MAAAA,GAASgD,cAAAA,CAAf,YAAeA,CAAf;AAEA,QAAMX,IAAAA,GAAOY,QAAAA,CAAb,YAAaA,CAAb;AAEA,QAAMX,MAAAA,GAASO,UAAAA,CAAAA,YAAAA,EAAyBL,QAAAA,CAAAA,OAAAA,CAAxC,QAAeK,CAAf;AAEA,QAAMN,OAAAA,GAAUO,WAAAA,CAAAA,YAAAA,EAAhB,MAAgBA,CAAhB;AAEA,QAAMxB,MAAAA,GAAS4B,UAAAA,CAAAA,YAAAA,EAAf,MAAeA,CAAf;AAEA,QAAMjD,IAAAA,GAAO;AACXsB,MAAAA,YAAAA,EADW,YAAA;AAEXvB,MAAAA,MAAAA,EAFW,MAAA;AAGXqC,MAAAA,IAAAA,EAHW,IAAA;AAIXC,MAAAA,MAAAA,EAJW,MAAA;AAKXhB,MAAAA,MAAAA,EALW,MAAA;AAMXiB,MAAAA,OAAAA,EAAAA;AANW,KAAb;AASAK,IAAAA,MAAAA,CAAAA,MAAAA,CAAcJ,QAAAA,CAAdI,OAAAA,EAAAA,IAAAA,EAAsC;AACpCH,MAAAA,QAAAA,EADoC,IAAA;AAEpCE,MAAAA,cAAAA,EAAgB;AAFoB,KAAtCC;AAKAR,IAAAA,QAAAA,CAAS,UAAA,KAAA,EAAA;AAAA,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AAATA,KAAAA,CAAAA;AACD;;AAED,WAAA,UAAA,CAAA,KAAA,EAAA,QAAA,EAAuD;AAAA,QAAjC5B,WAAiC,GAAA,KAAA,CAAjCA,WAAiC;AAAA,QAApBR,MAAoB,GAAA,KAAA,CAApBA,MAAoB;AACrD,QAAMmD,SAAAA,GAAY,WAAA,CAAA,MAAA,CAAmB,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,aAAYC,GAAAA,GAAZ,CAAA;AAAnB,KAAA,EAAlB,CAAkB,CAAlB;AAEA,QAAI/B,SAAAA,GAAJ,CAAA;;AACA,QAAIoB,QAAAA,CAAJ,CAAIA,CAAJ,EAAiB;AACfpB,MAAAA,SAAAA,GAAYoB,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAZpB,MAAAA;AADF,KAAA,MAEO,IAAIrB,MAAAA,CAAJ,MAAA,EAAmB;AACxBqB,MAAAA,SAAAA,GAAYrB,MAAAA,CAAZqB,MAAAA;AACD;;AAED,QAAMgC,QAAAA,GAAW,CAACtB,KAAAA,GAAD,SAAA,KAAuBV,SAAAA,GAAYb,WAAAA,CAApD,MAAiB,CAAjB;AAEA,QAAM8B,MAAAA,GAAS,IAAA,KAAA,CAAA,SAAA,EAAA,IAAA,CAAf,QAAe,CAAf;AAEA,WAAOd,MAAAA,CAAAA,MAAAA,EAAP,WAAOA,CAAP;AACD;;AAED,WAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAA6D;AAAA,QAAtCjB,YAAsC,GAAA,KAAA,CAAtCA,YAAsC;AAAA,QAAxBL,MAAwB,GAAA,KAAA,CAAxBA,MAAwB;AAAA,QAAhBD,IAAgB,GAAA,KAAA,CAAhBA,IAAgB;AAC3D,QAAIqD,SAAAA,GAAJ,MAAA;AAEA,QAAItD,MAAAA,CAAJ,MAAA,EAAmBsD,SAAAA,IAAAA,YAAAA;AAEnB,QAAMZ,SAAAA,GAAYY,SAAAA,GAAlB,MAAA;AAEAV,IAAAA,MAAAA,CAAAA,MAAAA,CAAcJ,QAAAA,CAAdI,OAAAA,EAAgC;AAAEF,MAAAA,SAAAA,EAAlCE;AAAgC,KAAhCA;AAEA,WAAO,IAAA,KAAA,CAAU3C,IAAAA,CAAV,MAAA,EAAA,IAAA,CAAP,SAAO,CAAP;AACD;;AAED,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA;;AAAA,QAAqBsD,KAArB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,KAAA;;AAAA,QAAA,iBAAA,EAAA,SAAA,EAAA,cAAA,EAAA,qBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,EAAA,YAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,UAAA;;AAAA,WAAA,oBAAA,IAAA,CAAA,SAAA,UAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,iBAAA,GAMMf,QAAAA,CANN,OAAA,EAEIE,SAFJ,GAAA,iBAAA,CAAA,SAAA,EAGIC,cAHJ,GAAA,iBAAA,CAAA,cAAA,EAAA,qBAAA,GAAA,iBAAA,CAAA,YAAA,EAIoBrC,QAJpB,GAAA,qBAAA,CAAA,QAAA,EAI8BM,QAJ9B,GAAA,qBAAA,CAAA,QAAA,EAIwCV,MAJxC,GAAA,qBAAA,CAAA,MAAA,EAKIuC,QALJ,GAAA,iBAAA,CAAA,QAAA;AAQQtB,YAAAA,SARR,GAQoBsB,QAAAA,CARpB,MAQQtB;;AARR,gBAAA,CAAA,KAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAUmB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,qBAAWqC,UAAAA,CAAAA,OAAAA,EAAX,QAAWA,CAAX;AAV/B,aAUmB,CAVnB;;AAAA,eAAA,CAAA;AAYQC,YAAAA,YAZR,GAYuB7C,QAAAA,KAAAA,QAAAA,GAAAA,CAAAA,GAZvB,MAYQ6C;AAEFpB,YAAAA,IAdN,GAcaI,QAAAA,CAAAA,KAAAA,CAdb,cAcaA,CAAPJ;;AACJ,aAAA,KAAA,GAAA,IAAA,EAAA,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA,iBAAA,CAAaI,QAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAb,cAAaA,CAAb,CAAA;;AACAJ,YAAAA,IAAAA,GAAOA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAczB,QAAAA,KAAAA,MAAAA,GAAsBV,MAAAA,GAAtBU,CAAAA,GAAmCV,MAAAA,GAAxDmC,CAAOA,CAAPA;AAEME,YAAAA,OAlBR,GAkBkB,IAAA,KAAA,CAAA,SAAA,EAAA,IAAA,CAlBlB,SAkBkB,CAAVA;AACNH,YAAAA,QAAAA,CAAS,UAAA,KAAA,EAAA;AAAA,qBAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAsBC,gBAAAA,IAAAA,EAAtB,IAAA;AAA4BE,gBAAAA,OAAAA,EAA5B;AAAA,eAAA,CAAA;AAATH,aAAAA,CAAAA;AAnBF,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAqBQ,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,qBAAWoB,UAAAA,CAAAA,OAAAA,EAAX,GAAWA,CAAX;AArBpB,aAqBQ,CArBR;;AAAA,eAAA,EAAA;AAuBEb,YAAAA,cAAAA,IAAAA,YAAAA;AAEMe,YAAAA,IAzBR,GAyBef,cAAAA,GAzBf,SAyBQe;AACN,gBAAIA,IAAAA,IAAJ,CAAA,EAAef,cAAAA,GAAAA,IAAAA;AAETgB,YAAAA,UA5BR,GAAA,GAAA,MAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,CA4BQA;AACNA,YAAAA,UAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA,MAAAA,CAAAA,iBAAAA,CAAsC,IAAA,KAAA,CAAA,YAAA,EAAA,IAAA,CAAtCA,CAAsC,CAAtCA,CAAAA,CAAAA;AAEAf,YAAAA,MAAAA,CAAAA,MAAAA,CAAcJ,QAAAA,CAAdI,OAAAA,EAAgC;AAAED,cAAAA,cAAAA,EAAlCC;AAAgC,aAAhCA;AACAR,YAAAA,QAAAA,CAAS,UAAA,KAAA,EAAA;AAAA,qBAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAsBG,gBAAAA,OAAAA,EAAtB;AAAA,eAAA,CAAA;AAATH,aAAAA,CAAAA;;AAhCF,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,CAAA;AAAA;;AAmCA,WAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAA8C;AAAA,QACpCnB,KADoC,GAChBH,GADgB,CAAA,KAAA;AAAA,QAC7BI,QAD6B,GAChBJ,GADgB,CAAA,QAAA;AAG5C8C,IAAAA,MAAAA,IAAUA,MAAAA,CAAO;AAAE9C,MAAAA,GAAAA,EAAF,KAAA;AAAc+C,MAAAA,IAAAA,EAAd,IAAA;AAAoB3C,MAAAA,QAAAA,EAApB,QAAA;AAA8B4C,MAAAA,WAAAA,EAA/CF;AAAiB,KAAPA,CAAVA;AACD;;AAED,WAAA,WAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAA+C;AAC7C,QAAA,KAAA,EAAWG,SAAAA,CAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CAAAA;AAEX,QAAI,CAACxC,YAAAA,CAAL,UAAA,EAA8B;AAHe,QAAA,aAAA,GAKnB2C,IAAAA,CALmB,OAAA;AAAA,QAKrCF,KALqC,GAAA,aAAA,CAAA,KAAA;AAAA,QAK9BC,MAL8B,GAAA,aAAA,CAAA,MAAA;AAO7CE,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,MAAAA,GAA2BH,KAA3BG,EAAAA,GAAqCF,MAArCE,EAAAA;AACD;;AAED,MAAMC,kBAAAA,GAAqB,SAArBA,kBAAqB,CAAA,QAAA,EAAA;AAAA,WACzB7C,YAAAA,CAAaL,QAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,YAAAA,GADY,WACzBK,CADyB;AAA3B,GAAA;;AAGA,MAAM2C,IAAAA,GAAOG,MAAAA,CAAb,EAAaA,CAAb;AAEAC,EAAAA,SAAAA,CAAU,YAAM;AAAA,QAAA,QAAA,GAAA,aAAA,oBAAA,IAAA,CAAA,IAAA,CAAA;;AACdC,IAAAA,QAAAA;AAEA,QAAIhB,KAAAA,GAAJ,IAAA;;AAEA,aAAA,IAAA,GAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAA,KAAA;;AAAA,aAAA,oBAAA,IAAA,CAAA,SAAA,KAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,KAAA,GAAA,aAAA,oBAAA,IAAA,CAAA,SAAA,KAAA,GAAA;AAAA,oBAAA,QAAA;AAAA,uBAAA,oBAAA,IAAA,CAAA,SAAA,MAAA,CAAA,SAAA,EAAA;AAAA,yBAAA,CAAA,EAAA;AAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,2BAAA,CAAA;AAAA,+BAAA,SAAA,CAAA,aAAA,CAEYiB,SAAAA,CAFZ,KAEYA,CAFZ,EAAA,IAAA,EAAA,CAAA,CAAA;;AAAA,2BAAA,CAAA;AAIIjB,wBAAAA,KAAAA,GAAAA,KAAAA;AAEQjD,wBAAAA,QANZ,GAMyBkC,QAAAA,CAAAA,OAAAA,CANzB,YAMyBA,CANzB,QAMYlC;AANZ,wBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,+BAQU,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,iCAAWkD,UAAAA,CAAAA,OAAAA,EAAoBlD,QAAAA,GAA/B,GAAWkD,CAAX;AARtB,yBAQU,CARV;;AAAA,2BAAA,CAAA;AAAA,2BAAA,KAAA;AAAA,+BAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,CAAA;AAAA,eAAA,CAAA;;AAAA,iBAAA,CAAA;AAAA,qBAAA,SAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAA,IAAA,EAAA,CAAA,CAAA;;AAAA,iBAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,EAAA,IAAA,CAAA;AAAA;;AALc,QAAA,kBAAA,GAoBVhB,QAAAA,CApBU,OAAA;AAAA,QAkBItC,MAlBJ,GAAA,kBAAA,CAAA,YAAA,CAAA,MAAA;AAAA,QAmBNuC,QAnBM,GAAA,kBAAA,CAAA,IAAA;AAsBd,QAAMtB,SAAAA,GAAYsB,QAAAA,CAAlB,MAAA;AAEA,QAAIvC,MAAAA,IAAJ,SAAA,EAAyB;AAEzBgE,IAAAA,IAAAA,CAAAA,OAAAA,GAAeO,EAAAA,CAAfP,IAAeO,CAAfP;AAEA,WAAOA,IAAAA,CAAAA,OAAAA,CAAP,GAAA;AA5BFI,GAAAA,EA6BG,CAAA,MAAA,EAASrC,MAAAA,CA7BZqC,OA6BG,CA7BHA,CAAAA;AA+BAA,EAAAA,SAAAA,CAAAA,QAAAA,EAAoB,CAAA,KAAA,EAAA,MAAA,EAAgBrC,MAAAA,CAApCqC,OAAoB,CAApBA,CAAAA;AAEA,MAAMI,UAAAA,GAAa,OAAA,CAAQ,YAAA;AAAA,WAAMC,UAAAA,CAAAA,iBAAAA,EAAN,SAAMA,CAAN;AAAR,GAAA,EAAwD,CAA3E,SAA2E,CAAxD,CAAnB;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAA,EAAL,UAAA;AAA4B,IAAA,KAAA,EAA5B,KAAA;AAA0C,IAAA,GAAA,EAA1C;AAAA,GAAA,EACG,CAAC,CAAC3E,MAAAA,CAAF,MAAA,IAAmB,CAAC,CAApB,YAAA,IACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAA,EADF,QAAA;AAEE,IAAA,KAAA,EAAO;AAAE4E,MAAAA,eAAAA,EAAAA,KAAoBrD,YAAAA,CAAtB;AAAA;AAFT,GAAA,EAIGvB,MAAAA,CAAAA,GAAAA,CAAW,UAAA,UAAA,EAAA,CAAA,EAAA;AAAA,WACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,SAAA,EADF,aAAA;AAEE,MAAA,GAAA,EAAQ6E,UAAR,GAAA,GAAQA,GAFV,CAAA;AAGE,MAAA,KAAA,EAAO;AACL7C,QAAAA,MAAAA,EAAWT,YAAAA,CAAXS,YAAWT,GADN,IAAA;AAELuD,QAAAA,UAAAA,EAAevD,YAAAA,CAAfuD,YAAevD,GAFV,IAAA;AAGLQ,QAAAA,KAAAA,EAAUO,MAAAA,CAAVP,CAAUO,CAAAA,GAAVP;AAHK,OAHT;AAQE,MAAA,KAAA,EAAOT,MAAAA,CART,CAQSA,CART;AASE,MAAA,uBAAA,EAAyB;AAAEyD,QAAAA,MAAAA,EAAF;AAAA;AAT3B,KAAA,CADU;AAAX/E,GAAAA,CAJH,CAFJ,EAsBG,CAAC,CAAD,YAAA,IACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAA,EADF,MAAA;AAEE,IAAA,KAAA,EAAO;AACLgC,MAAAA,MAAAA,EAAWA,MAAAA,IACRhC,MAAAA,CAAAA,MAAAA,GAAgBuB,YAAAA,CAAhBvB,YAAAA,GADHgC,CAAWA,CAAAA,GAAXA;AADK;AAFT,GAAA,EAOGK,IAAAA,CAAAA,GAAAA,CAAS,UAAA,GAAA,EAAA,EAAA,EAAA;AAAA,WACR,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,SAAA,EADF,UAAA;AAEE,MAAA,GAAA,EAAQvB,GAAAA,CAAR,QAAQA,KAAR,GAAQA,GAAkBA,GAAAA,CAF5B,MAAA;AAGE,MAAA,KAAA,EAAO;AACLkB,QAAAA,MAAAA,EAAWO,OAAAA,CAAXP,EAAWO,CAAAA,GADN,IAAA;AAELuC,QAAAA,UAAAA,EAAevC,OAAAA,CAAfuC,EAAevC,CAAAA,GAFV,IAAA;AAGLqC,QAAAA,eAAAA,EAAAA,KAAoBR,kBAAAA,CAAmBtD,GAAAA,CAAnBsD,QAAAA;AAHf;AAHT,KAAA,EASGtD,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAc,UAAA,IAAA,EAAA,EAAA,EAAA;AAAA,aACb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,SAAA,EADF,MAAA;AAEE,QAAA,GAAA,EAAQ+C,IAAR,GAAA,GAAQA,GAAR,EAAQA,GAAR,GAAQA,GAFV,EAAA;AAGE,QAAA,KAAA,EAAO;AAAE9B,UAAAA,KAAAA,EAAUO,MAAAA,CAAVP,EAAUO,CAAAA,GAHrB;AAGS,SAHT;AAIE,QAAA,KAAA,EAAOhB,MAAAA,CAJT,EAISA,CAJT;AAKE,QAAA,uBAAA,EAAyB;AAAEyD,UAAAA,MAAAA,EAL7B;AAK2B,SAL3B;AAME,QAAA,OAAA,EAAS,SAAA,OAAA,GAAA;AAAA,iBAAMhB,SAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAN,IAAMA,CAAN;AANX,SAAA;AAOE,QAAA,YAAA,EAAc,SAAA,YAAA,GAAA;AAAA,iBAAMiB,WAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAN,IAAMA,CAAN;AAPhB,SAAA;AAQE,QAAA,YAAA,EAAc,SAAA,YAAA,GAAA;AAAA,iBAAMA,WAAAA,CAAN,KAAMA,CAAN;AAAA;AARhB,OAAA,CADa;AAAdlE,KAAAA,CATH,CADQ;AAATuB,GAAAA,CAPH,CAvBJ,CADF;AApMF,CAAoB,CAApB;AAiQAZ,WAAAA,CAAAA,SAAAA,GAAwB;AACtBE,EAAAA,MAAAA,EAAQsD,SAAAA,CADc,MAAA;AAEtBvD,EAAAA,OAAAA,EAASuD,SAAAA,CAFa,IAAA;AAGtBnD,EAAAA,WAAAA,EAAamD,SAAAA,CAHS,IAAA;AAItBrD,EAAAA,SAAAA,EAAWqD,SAAAA,CAJW,MAAA;AAKtBpD,EAAAA,KAAAA,EAAOoD,SAAAA,CAAUC;AALK,CAAxBzD","sourcesContent":["import React, { useEffect, useState, useRef, useMemo, forwardRef } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport useAutoResize from '../../use/autoResize'\nimport { co } from '../../util'\n\nimport './style.less'\n\nconst defaultConfig = {\n  /**\n   * @description Board header\n   * @type {Array<String>}\n   * @default header = []\n   * @example header = ['column1', 'column2', 'column3']\n   */\n  header: [],\n  /**\n   * @description Board data\n   * @type {Array<Array>}\n   * @default data = []\n   */\n  data: [],\n  /**\n   * @description Row num\n   * @type {Number}\n   * @default rowNum = 5\n   */\n  rowNum: 5,\n  /**\n   * @description Header background color\n   * @type {String}\n   * @default headerBGC = '#00BAFF'\n   */\n  headerBGC: '#00BAFF',\n  /**\n   * @description Odd row background color\n   * @type {String}\n   * @default oddRowBGC = '#003B51'\n   */\n  oddRowBGC: '#003B51',\n  /**\n   * @description Even row background color\n   * @type {String}\n   * @default evenRowBGC = '#003B51'\n   */\n  evenRowBGC: '#0A2732',\n  /**\n   * @description Scroll wait time\n   * @type {Number}\n   * @default waitTime = 2000\n   */\n  waitTime: 2000,\n  /**\n   * @description Header height\n   * @type {Number}\n   * @default headerHeight = 35\n   */\n  headerHeight: 35,\n  /**\n   * @description Column width\n   * @type {Array<Number>}\n   * @default columnWidth = []\n   */\n  columnWidth: [],\n  /**\n   * @description Column align\n   * @type {Array<String>}\n   * @default align = []\n   * @example align = ['left', 'center', 'right']\n   */\n  align: [],\n  /**\n   * @description Show index\n   * @type {Boolean}\n   * @default index = false\n   */\n  index: false,\n  /**\n   * @description index Header\n   * @type {String}\n   * @default indexHeader = '#'\n   */\n  indexHeader: '#',\n  /**\n   * @description Carousel type\n   * @type {String}\n   * @default carousel = 'single'\n   * @example carousel = 'single' | 'page'\n   */\n  carousel: 'single',\n  /**\n   * @description Pause scroll when mouse hovered\n   * @type {Boolean}\n   * @default hoverPause = true\n   * @example hoverPause = true | false\n   */\n  hoverPause: true\n}\n\nfunction calcHeaderData({ header, index, indexHeader }) {\n  if (!header.length) {\n    return []\n  }\n\n  header = [...header]\n\n  if (index) header.unshift(indexHeader)\n\n  return header\n}\n\nfunction calcRows({ data, index, headerBGC, rowNum }) {\n  if (index) {\n    data = data.map((row, i) => {\n      row = [...row]\n\n      const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i +\n        1}</span>`\n\n      row.unshift(indexTag)\n\n      return row\n    })\n  }\n\n  data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n  const rowLength = data.length\n\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\n    data = [...data, ...data]\n  }\n\n  return data.map((d, i) => ({ ...d, scroll: i }))\n}\n\nfunction calcAligns(mergedConfig, header) {\n  const columnNum = header.length\n\n  let aligns = new Array(columnNum).fill('left')\n\n  const { align } = mergedConfig\n\n  return deepMerge(aligns, align)\n}\n\nconst ScrollBoard = forwardRef(({ onClick, config = {}, className, style, onMouseOver }, ref) => {\n  const { width, height, domRef } = useAutoResize(ref)\n\n  const [state, setState] = useState({\n    mergedConfig: null,\n\n    header: [],\n\n    rows: [],\n\n    widths: [],\n\n    heights: [],\n\n    aligns: []\n  })\n\n  const { mergedConfig, header, rows, widths, heights, aligns } = state\n\n  const stateRef = useRef({\n    ...state,\n    rowsData: [],\n    avgHeight: 0,\n    animationIndex: 0\n  })\n\n  Object.assign(stateRef.current, state)\n\n  function onResize() {\n    if (!mergedConfig) return\n\n    const widths = calcWidths(mergedConfig, stateRef.current.rowsData)\n\n    const heights = calcHeights(mergedConfig, header)\n\n    const data = { widths, heights }\n\n    Object.assign(stateRef.current, data)\n    setState(state => ({ ...state, ...data }))\n  }\n\n  function calcData() {\n    const mergedConfig = deepMerge(\n      deepClone(defaultConfig, true),\n      config || {}\n    )\n\n    const header = calcHeaderData(mergedConfig)\n\n    const rows = calcRows(mergedConfig)\n\n    const widths = calcWidths(mergedConfig, stateRef.current.rowsData)\n\n    const heights = calcHeights(mergedConfig, header)\n\n    const aligns = calcAligns(mergedConfig, header)\n\n    const data = {\n      mergedConfig,\n      header,\n      rows,\n      widths,\n      aligns,\n      heights\n    }\n\n    Object.assign(stateRef.current, data, {\n      rowsData: rows,\n      animationIndex: 0\n    })\n\n    setState(state => ({ ...state, ...data }))\n  }\n\n  function calcWidths({ columnWidth, header }, rowsData) {\n    const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n    let columnNum = 0\n    if (rowsData[0]) {\n      columnNum = rowsData[0].ceils.length\n    } else if (header.length) {\n      columnNum = header.length\n    }\n\n    const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n    const widths = new Array(columnNum).fill(avgWidth)\n\n    return deepMerge(widths, columnWidth)\n  }\n\n  function calcHeights({ headerHeight, rowNum, data }, header) {\n    let allHeight = height\n\n    if (header.length) allHeight -= headerHeight\n\n    const avgHeight = allHeight / rowNum\n\n    Object.assign(stateRef.current, { avgHeight })\n\n    return new Array(data.length).fill(avgHeight)\n  }\n\n  function * animation(start = false) {\n    let {\n      avgHeight,\n      animationIndex,\n      mergedConfig: { waitTime, carousel, rowNum },\n      rowsData\n    } = stateRef.current\n\n    const rowLength = rowsData.length\n\n    if (start) yield new Promise(resolve => setTimeout(resolve, waitTime))\n\n    const animationNum = carousel === 'single' ? 1 : rowNum\n\n    let rows = rowsData.slice(animationIndex)\n    rows.push(...rowsData.slice(0, animationIndex))\n    rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1)\n\n    const heights = new Array(rowLength).fill(avgHeight)\n    setState(state => ({ ...state, rows, heights }))\n\n    yield new Promise(resolve => setTimeout(resolve, 300))\n\n    animationIndex += animationNum\n\n    const back = animationIndex - rowLength\n    if (back >= 0) animationIndex = back\n\n    const newHeights = [...heights]\n    newHeights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n    Object.assign(stateRef.current, { animationIndex })\n    setState(state => ({ ...state, heights: newHeights }))\n  }\n\n  function emitEvent(handle, ri, ci, row, ceil) {\n    const { ceils, rowIndex } = row\n\n    handle && handle({ row: ceils, ceil, rowIndex, columnIndex: ci })\n  }\n\n  function handleHover(enter, ri, ci, row, ceil) {\n    if (enter) emitEvent(onMouseOver, ri, ci, row, ceil)\n\n    if (!mergedConfig.hoverPause) return\n\n    const { pause, resume } = task.current\n\n    enter && pause && resume ? pause() : resume()\n  }\n\n  const getBackgroundColor = rowIndex =>\n    mergedConfig[rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']\n\n  const task = useRef({})\n\n  useEffect(() => {\n    calcData()\n\n    let start = true\n\n    function * loop() {\n      while (true) {\n        yield * animation(start)\n\n        start = false\n\n        const { waitTime } = stateRef.current.mergedConfig\n\n        yield new Promise(resolve => setTimeout(resolve, waitTime - 300))\n      }\n    }\n\n    const {\n      mergedConfig: { rowNum },\n      rows: rowsData\n    } = stateRef.current\n\n    const rowLength = rowsData.length\n\n    if (rowNum >= rowLength) return\n\n    task.current = co(loop)\n\n    return task.current.end\n  }, [config, domRef.current])\n\n  useEffect(onResize, [width, height, domRef.current])\n\n  const classNames = useMemo(() => classnames('dv-scroll-board', className), [\n    className\n  ])\n\n  return (\n    <div className={classNames} style={style} ref={domRef}>\n      {!!header.length && !!mergedConfig && (\n        <div\n          className='header'\n          style={{ backgroundColor: `${mergedConfig.headerBGC}` }}\n        >\n          {header.map((headerItem, i) => (\n            <div\n              className='header-item'\n              key={`${headerItem}-${i}`}\n              style={{\n                height: `${mergedConfig.headerHeight}px`,\n                lineHeight: `${mergedConfig.headerHeight}px`,\n                width: `${widths[i]}px`\n              }}\n              align={aligns[i]}\n              dangerouslySetInnerHTML={{ __html: headerItem }}\n            />\n          ))}\n        </div>\n      )}\n\n      {!!mergedConfig && (\n        <div\n          className='rows'\n          style={{\n            height: `${height -\n              (header.length ? mergedConfig.headerHeight : 0)}px`\n          }}\n        >\n          {rows.map((row, ri) => (\n            <div\n              className='row-item'\n              key={`${row.toString()}-${row.scroll}`}\n              style={{\n                height: `${heights[ri]}px`,\n                lineHeight: `${heights[ri]}px`,\n                backgroundColor: `${getBackgroundColor(row.rowIndex)}`\n              }}\n            >\n              {row.ceils.map((ceil, ci) => (\n                <div\n                  className='ceil'\n                  key={`${ceil}-${ri}-${ci}`}\n                  style={{ width: `${widths[ci]}px` }}\n                  align={aligns[ci]}\n                  dangerouslySetInnerHTML={{ __html: ceil }}\n                  onClick={() => emitEvent(onClick, ri, ci, row, ceil)}\n                  onMouseEnter={() => handleHover(true, ri, ci, row, ceil)}\n                  onMouseLeave={() => handleHover(false)}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n})\n\nScrollBoard.propTypes = {\n  config: PropTypes.object,\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  className: PropTypes.string,\n  style: PropTypes.object\n}\n\nexport default ScrollBoard\n"]},"metadata":{},"sourceType":"module"}